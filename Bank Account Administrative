class BankAccount:

    all_accounts = []

    def __init__(self, account_number, account_owner, account_balance, account_type,account_username, account_password):
        self.account_number = account_number
        self.account_owner = account_owner
        self.account_balance = account_balance
        self.account_type = account_type
        self.account_username = account_username
        self.account_password = account_password

        BankAccount.all_accounts.append(self)

    def deposit(self, amount):
        self.account_balance += amount
        print("Deposited  in account {}. New Balance: {}".format(self.account_number, self.account_balance))

    def withdraw(self, amount):
        if self.account_balance < amount:
            print("You don't have enough money!")
        elif self.account_balance >= amount:
            self.account_balance -= amount
            print("Withdrew in account {}. New Balance: {}".format(self.account_number, self.account_balance))

def find_account_by_number(account_number):
    for account in BankAccount.all_accounts:
        if account.account_number == account_number:
            return account
    return None

def save_accounts_to_file():
    has_run_before = False
    f = open("accounts.txt", "w")
    for account in BankAccount.all_accounts:
        if has_run_before:
            f.write("\n")
        f.write(str(account.account_number))
        f.write("\n")
        f.write(account.account_owner)
        f.write("\n")
        f.write(str(account.account_balance))
        f.write("\n")
        f.write(account.account_type)
        f.write("\n")
        f.write(account.account_username)
        f.write("\n")
        f.write(account.account_password)
        has_run_before = True
    f.close()

def load_accounts_from_file():
    f = open("accounts.txt", "r")
    lines = f.readlines()
    f.close()

    i = 0
    while i < len(lines):
        account_number = int(lines[i].strip())
        account_owner = lines[i + 1].strip()
        account_balance = float(lines[i + 2].strip())
        account_type = lines[i + 3].strip()
        account_username = lines[i + 4].strip()
        account_password = lines[i + 5].strip()

        BankAccount(account_number, account_owner, account_balance, account_type, account_username, account_password)

        i += 6

def enforce_unique_password(password):

    current_passwords = []

    for account in BankAccount.all_accounts:
        current_passwords.append(account.account_password)


        f = open("accounts.txt", "r")
        lines = f.readlines()
        f.close()

        for i in range(5,len(lines), 6):
            current_passwords.append(lines[i].strip())

    return password in current_passwords

def main():
    load_accounts_from_file()
    while True:
        print("Would you like to create an account, manage an account, or leave?")
        choice = input("Type 'create' to create an account, or 'manage' to manage an account, or 'leave' to leave: ")
        if choice == 'create':
            owner = input("Enter your name")
            balance = 0
            account_number = len(BankAccount.all_accounts) + 1
            username = input("Enter a username:")

            password = input("Enter a password:")
            while enforce_unique_password(password):
                print("Password is already in use. Please enter a new password.")
                password = input("Enter a password:")

            Type = input("Enter account type" + "\n" + "We offer two types of accounts: 'checking' and 'savings'")
            if Type == 'checking':
                 account_type = "checking"
            elif Type == 'savings':
                account_type = "savings"

            new_account = BankAccount(account_number, owner, balance, account_type, username, password)

            print("Account created! Number: {}, Owner: {}, Balance: {}, Type: {}, Username: {}, Password: {}".
                format(account_number, owner, balance, account_type, username, password))

        elif choice == 'manage':
            acct_num = int(input("Enter the account number you want to manage: "))
            acct = find_account_by_number(acct_num)

            if acct is not None:
                print("Managing account {} for {}".format(acct.account_number, acct.account_owner))
                while True:
                    action = input("Type 'deposit' to deposit, 'withdraw' to withdraw,"
                                    "'balance' to view balance, 'exit' to exit: ")
                    if action == 'deposit':
                        amount = float(input("Enter the amount to deposit: "))
                        acct.deposit(amount)
                    elif action == 'withdraw':
                        amount = float(input("Enter the amount to withdraw: "))
                        acct.withdraw(amount)
                    elif action == 'balance':
                        balance =  acct.account_balance
                        print("Balance: ${}".format(balance))
                    elif action == 'exit':
                        break
                    else:
                        print("Invalid action")
        elif choice == 'leave':
            save_accounts_to_file()
            break

if __name__ == '__main__':
    main()
